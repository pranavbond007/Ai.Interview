// src/pages/ResumeUpload.jsx

import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import GlowingButton from '../components/ui/GlowingButton';

export default function ResumeUpload() {
  const [file, setFile] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleFileChange = (e) => {
    setFile(e.target.files[0]);
    setError(''); // Clear previous errors
  };

  const handleUpload = async () => {
  if (!file) {
    setError('Please choose a resume file first.');
    return;
  }
  setLoading(true);
  setError('');

  const formData = new FormData();
  formData.append('resume', file); 

  try {
    const response = await fetch('http://localhost:4000/start_interview', {
      method: 'POST',
      body: formData,
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || 'Failed to start interview.');
    }

    const result = await response.json();
    
    // ✅ THE ONLY CHANGE NEEDED: Save the questions to sessionStorage
    if (result.questions && result.questions.length > 0) {
      sessionStorage.setItem('interviewQuestions', JSON.stringify(result.questions));
      navigate('/start');
    } else {
      throw new Error('The AI could not generate questions from this resume.');
    }

  } catch (err) {
    setError(err.message);
  } finally {
    setLoading(false);
  }
};


  return (
    <div className="min-h-screen bg-black flex items-center justify-center">
      <div className="glass-morphism p-8 rounded-xl text-center max-w-lg w-full mx-4">
        <h1 className="text-3xl font-bold text-gradient mb-4">Upload Your Resume</h1>
        <p className="text-gray-400 mb-6">
          Upload your resume to get personalized interview questions generated by our AI.
        </p>
        
        <input 
          type="file" 
          accept=".pdf" 
          onChange={handleFileChange}
          className="mb-4 text-white file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-neon-blue/20 file:text-neon-blue hover:file:bg-neon-blue/30"
        />
        
        {error && <p className="text-red-500 mb-4">{error}</p>}
        
        <GlowingButton onClick={handleUpload} disabled={!file || loading} loading={loading}>
          {loading ? 'Generating Questions…' : 'Start My Interview'}
        </GlowingButton>
      </div>
    </div>
  );
}
